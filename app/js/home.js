/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/modules/date.js":
/*!********************************!*\
  !*** ./src/js/modules/date.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertDateFromDDMM: () => (/* binding */ convertDateFromDDMM),\n/* harmony export */   getCurrentDateString: () => (/* binding */ getCurrentDateString),\n/* harmony export */   getEndtOfWeek: () => (/* binding */ getEndtOfWeek),\n/* harmony export */   getFormatDate: () => (/* binding */ getFormatDate),\n/* harmony export */   getFormatDateMM: () => (/* binding */ getFormatDateMM),\n/* harmony export */   getStartOfWeek: () => (/* binding */ getStartOfWeek),\n/* harmony export */   getTomorrowDay: () => (/* binding */ getTomorrowDay),\n/* harmony export */   isDateInCurrentMonth: () => (/* binding */ isDateInCurrentMonth),\n/* harmony export */   isDateInCurrentWeek: () => (/* binding */ isDateInCurrentWeek),\n/* harmony export */   isDateInCurrentYear: () => (/* binding */ isDateInCurrentYear)\n/* harmony export */ });\nfunction getCurrentDateString(date) {\r\n    const today = !date ? new Date() : new Date(date);\r\n    const dd = String(today.getDate()).padStart(2, '0');\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0');\r\n    const yyyy = today.getFullYear();\r\n    return `${dd}.${mm}.${yyyy}`\r\n}\r\n\r\nfunction getFormatDateMM(date) {\r\n    const today = !date ? new Date() : new Date(date);\r\n    const dd = String(today.getDate()).padStart(2, '0');\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0');\r\n    const yyyy = today.getFullYear();\r\n    return `${mm}.${dd}.${yyyy}`\r\n}\r\n\r\nfunction getTomorrowDay(date) {\r\n    const startDate = !date ? new Date() : new Date(date);\r\n    const day = 60 * 60 * 24 * 1000;\r\n    return new Date(startDate.getTime() + day);\r\n}\r\n\r\nfunction getFormatDate(currentDate) {\r\n    if (currentDate.length < 12) {\r\n        currentDate = new Date(convertDateFromDDMM(currentDate));\r\n    }\r\n\r\n    const newDate = new Date(currentDate);\r\n    const maps = {\r\n        daysOfWeek: [\r\n            'Воскресенье',\r\n            'Понедельник',\r\n            'Вторник',\r\n            'Среда',\r\n            'Четверг',\r\n            'Пятница',\r\n            'Суббота',\r\n        ],\r\n        months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\r\n        months2: ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'],\r\n    };\r\n    const date = new Date(newDate.setDate(newDate.getDate()));\r\n    return `\r\n        ${maps.daysOfWeek[date.getDay()]}\r\n        ${date.getDate()}\r\n        ${maps.months2[maps.months.indexOf(maps.months[date.getMonth()])].toLowerCase()}\r\n    `;\r\n}\r\n\r\n\r\nfunction convertDateFromDDMM(date) {\r\n    if (!date) return;\r\n    const arr = date.split('.');\r\n    return [arr[1], arr[0], arr[2]].join('.');\r\n}\r\n\r\n\r\n\r\nfunction isDateInCurrentWeek(date) {\r\n    const startOfWeek = new Date(getStartOfWeek().toDateString());\r\n    const endOfWeek = new Date(getEndtOfWeek().toDateString());\r\n    return date >= startOfWeek && date <= endOfWeek;\r\n}\r\n\r\nfunction isDateInCurrentMonth(date) {\r\n    const currentMonth = new Date().getMonth();\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    const dateMonth = date.getMonth();\r\n    const dateYear = date.getFullYear();\r\n\r\n    return currentMonth === dateMonth && currentYear === dateYear;\r\n}\r\nfunction isDateInCurrentYear(date) {\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    const dateYear = date.getFullYear();\r\n\r\n    return currentYear === dateYear;\r\n}\r\n\r\n\r\nfunction getStartOfWeek() {\r\n    const now = new Date();\r\n    return new Date(now.setDate(now.getDate() - now.getDay() + 1));\r\n}\r\nfunction getEndtOfWeek() {\r\n    const now = new Date();\r\n    return new Date(now.setDate(now.getDate() - now.getDay() + 7));\r\n}\n\n//# sourceURL=webpack://gulp-builder/./src/js/modules/date.js?");

/***/ }),

/***/ "./src/js/pages/home.js":
/*!******************************!*\
  !*** ./src/js/pages/home.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_date_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/date.js */ \"./src/js/modules/date.js\");\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const modalContainer = document.querySelector('.modal-container');\n    class Todo {\n        constructor() {\n            this.tabs = document.querySelector('[data-todo-tabs]').wdTab;\n            if (!this.tabs) return;\n            this.tabsEl = this.tabs.container;\n            this.createTaskEl = document.querySelector('.create-task');\n            this.actionTasks = new ActionTasks();\n            this.init();\n\n            this.textStub = {\n                'today': 'Задач на сегодня нет!',\n                'tomorrow': 'Задач на завтра нет!',\n                'week': 'Задач на эту неделю нет!',\n                'month': 'Задач на этот месяц нет!',\n                'year': 'Задач на этот год нет!',\n                'other': 'Задач нет!',\n                'all': 'Задач нет!',\n            };\n            this.titleTab = {\n                'today': 'Задачи на сегодня',\n                'tomorrow': 'Задачи на завтра',\n                'week': 'Задачи на эту неделю',\n                'month': 'Задачи на этот месяц',\n                'year': 'Задачи на этот год',\n                'other': 'Задачи без даты',\n                'all': 'Все задачи',\n            };\n        }\n\n        init() {\n            this.changed();\n            this.tabsEl.addEventListener('tabChange', this.changed.bind(this));\n            this.newTask();\n        }\n\n\n        async changed() {\n            const todoActiveTab = this.tabs.activeTab;\n            const todoPanel = this.tabs.activePanel;\n\n            todoPanel.innerHTML = '';\n            new Loader(todoPanel).create()\n            this.tabsEl.classList.add('_loader');\n            this.tabsEl.classList.add('_stub');\n\n            const data = await this.actionTasks.fetchPosts();\n            new Loader(todoPanel).hide();\n\n            const nameTab = todoActiveTab.dataset.tabName;\n            let newData = {};\n            if (nameTab === 'today') {\n                newData.data = sortByToday(data);\n                if (newData.data.length > 0) {\n                    newData.title = `Задачи на сегодня \n                    <span class=\"text-sm text-gray-400\">${(0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentDateString)(new Date())}<span>\n                    `;\n                }\n            }\n            if (nameTab === 'tomorrow') {\n                newData.data = sortByTomorrow(data);\n                if (newData.data.length > 0) {\n                    newData.title = `Задачи на завтра \n                    <span class=\"text-sm text-gray-400\">${(0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentDateString)((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getTomorrowDay)(new Date()))}<span>\n                    `;\n                }\n            }\n            if (nameTab === 'week') {\n                newData.data = sortByWeek(data);\n                if (newData.data.length > 0) {\n                    newData.title = `Задачи на неделю \n                    <span class=\"text-sm text-gray-400\">${(0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentDateString)((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getStartOfWeek)())} — ${(0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentDateString)((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getEndtOfWeek)())}<span>\n                    `;\n                }\n            }\n            if (nameTab === 'month') newData.data = sortByMonth(data);\n            if (nameTab === 'year') newData.data = sortByYear(data);\n            if (nameTab === 'other') newData.data = sortByOther(data);\n            if (nameTab === 'all') newData.data = allTasks(data);\n\n\n            this.tabsEl.classList.remove('_loader');\n            if (newData.data && newData.data.length > 0) {\n                renderPosts.call(this, newData);\n                this.tabsEl.classList.remove('_stub');\n            } else {\n                renderStub.call(this);\n            }\n\n\n            function renderStub() {\n                const nameTab = todoActiveTab.dataset.tabName;\n                if (!nameTab) return;\n                todoPanel.innerHTML = `\n                    <span class=\"text-center block mt-[40px] text-2xl\">${this.textStub[nameTab]}</span>\n                    <button type=\"button\" class=\"btn btn-reset ml-auto mr-auto mt-6 btn-primary\" data-modal-path=\"create-task\">\n                        <span class=\"btn-primary__text\">\n                            Добавить задачу\n                        </span>\n                    </button>\n                `;\n            }\n\n            function renderPosts(currentData) {\n                const data = currentData.data;\n                const html = data.map(item => {\n                    return `\n                    <article class=\"bg-white rounded-2xl flex justify-between gap-16 text-black py-6 px-8\">\n                        <div class=\"flex flex-col gap-4\">\n                            <p>${item.name || 'Без названия'}</p>\n                            ${!item.other ? `<time class=\"text-md\">${(0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getFormatDate)(item.date)}</time>` : ''}\n                        </div>\n                        ${!item.other ? `<time class=\"text-xs text-gray-400\">${item.date}</time>` : ''}\n                    </article>\n                `;\n                })\n                todoPanel.insertAdjacentHTML('beforeend', `\n                    ${`<h2 class=\"mb-5 text-2xl\">${currentData.title}</h2>`}\n                    <div class=\"flex flex-col gap-4\">${html.join('')}</div>\n                `);\n            }\n\n        }\n\n\n\n        newTask() {\n            const form = this.createTaskEl;\n            const checkboxes = form.querySelectorAll('[data-checkbox-date]');\n            const date = form.querySelector('[data-field-date]');\n            const name = form.querySelector('[data-field-name]');\n\n            checkboxes.forEach(checkbox => {\n                checkbox.addEventListener('change', checkboxHandler);\n            })\n\n\n            function checkboxHandler() {\n                const name = this.dataset.checkboxDate;\n                checkboxes.forEach(checkbox => {\n                    if (this !== checkbox) checkbox.checked = false;\n                });\n                date.datePicker.clear();\n                if (this.checked) {\n                    date.setAttribute('disabled', '');\n\n                    if (name === 'today') {\n                        date.datePicker.selectDate(new Date());\n                    }\n                    if (name === 'tomorrow') {\n                        date.datePicker.selectDate((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getTomorrowDay)(new Date()));\n                    }\n                    if (name === 'year') {\n                        date.datePicker.selectDate(`01.01.${new Date().getFullYear() + 1}`);\n                    }\n                } else {\n                    date.removeAttribute('disabled');\n                }\n            }\n\n            form.addEventListener('submit', (e) => {\n                e.preventDefault();\n                const data = {\n                    name: name.value,\n                    date: date.value\n                }\n                this.createTask(data);\n            })\n        }\n\n        async createTask(data) {\n            new Loader(this.createTaskEl).createWithWrapper()\n            await this.actionTasks.createTask(data);\n            setTimeout(() => {\n                new Loader(this.createTaskEl).hide()\n                modalContainer.modal.close('create-task');\n                this.changed();\n            }, 250);\n        }\n\n        getContainerFromInput(el) {\n            return el.closest('.input-primary');\n        }\n\n    }\n\n    new Todo();\n});\n\n\nclass ActionTasks {\n    constructor() {\n        this.url = 'https://todo-61c91-default-rtdb.firebaseio.com/';\n    }\n\n    async createTask(post) {\n        try {\n            const request = new Request(`${this.url}/tasks.json`, {\n                method: 'post',\n                body: JSON.stringify(post)\n            });\n            return this.useRequest(request);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    async fetchPosts() {\n        try {\n            const request = new Request(`${this.url}/tasks.json`, {\n                method: 'get'\n            });\n            return this.useRequest(request);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    async useRequest(request) {\n        const response = await fetch(request)\n        return await response.json();\n    }\n}\n\n\nclass Loader {\n    constructor(target, path) {\n        this.el = target;\n        this.path = path || 'beforeend';\n        if (!this.el) return;\n        this.loader = this.el.querySelector('.loader-wrapper') || this.el.querySelector('.loader') || null;\n    }\n\n    createWithWrapper() {\n        if (this.loader) return;\n        this.el.insertAdjacentHTML(this.path, `\n            <div class=\"loader-wrapper\">\n                <span class=\"loader\"></span>\n            </div>\n        `);\n    }\n    create() {\n        if (this.loader) return;\n        this.el.insertAdjacentHTML(this.path, `\n            <span class=\"loader\"></span>\n        `);\n    }\n\n    hide() {\n        if (!this.loader) return;\n        this.loader.remove();\n    }\n}\n\nfunction sortByToday(data) {\n    const currentDate = (0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentDateString)(new Date());\n    const result = [];\n    for (const item in data) {\n        if (data[item].date === currentDate) {\n            result.push(data[item]);\n        }\n    }\n    return result;\n}\n\nfunction sortByTomorrow(data) {\n    const currentDate = (0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentDateString)((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.getTomorrowDay)(new Date()));\n    const result = [];\n    for (const item in data) {\n        if (data[item].date === currentDate) {\n            result.push(data[item]);\n        }\n    }\n    return result;\n}\n\nfunction sortByOther(data) {\n    const result = [];\n    for (const item in data) {\n        if (data[item].date === '') {\n            data[item].other = true;\n            result.push(data[item]);\n        }\n    }\n    return result;\n}\n\nfunction sortByWeek(data) {\n    const result = [];\n    for (const item in data) {\n        if ((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.isDateInCurrentWeek)(new Date((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.convertDateFromDDMM)(data[item].date)))) {\n            result.push(data[item]);\n        }\n    }\n    return result;\n}\n\nfunction sortByMonth(data) {\n    const result = [];\n    for (const item in data) {\n        if ((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.isDateInCurrentMonth)(new Date((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.convertDateFromDDMM)(data[item].date)))) {\n            result.push(data[item]);\n        }\n    }\n    return result;\n}\n\nfunction sortByYear(data) {\n    const result = [];\n    for (const item in data) {\n        if ((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.isDateInCurrentYear)(new Date((0,_modules_date_js__WEBPACK_IMPORTED_MODULE_0__.convertDateFromDDMM)(data[item].date)))) {\n            result.push(data[item]);\n        }\n    }\n    return result;\n}\n\n\n\nfunction allTasks(data) {\n    const result = [];\n    for (const item in data) {\n        result.push(data[item]);\n    }\n    return result;\n}\n\n//# sourceURL=webpack://gulp-builder/./src/js/pages/home.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/pages/home.js");
/******/ 	
/******/ })()
;